/* Auto-generated by genmsg_cpp for file /home/johanv/ros_workspace_final/QuadroController/msg/channel_values.msg */
#ifndef QUADROCONTROLLER_MESSAGE_CHANNEL_VALUES_H
#define QUADROCONTROLLER_MESSAGE_CHANNEL_VALUES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace QuadroController
{
template <class ContainerAllocator>
struct channel_values_ {
  typedef channel_values_<ContainerAllocator> Type;

  channel_values_()
  : channel_1(0)
  , channel_2(0)
  , channel_3(0)
  , channel_4(0)
  , channel_5(0)
  , channel_6(0)
  , channel_7(0)
  {
  }

  channel_values_(const ContainerAllocator& _alloc)
  : channel_1(0)
  , channel_2(0)
  , channel_3(0)
  , channel_4(0)
  , channel_5(0)
  , channel_6(0)
  , channel_7(0)
  {
  }

  typedef int32_t _channel_1_type;
  int32_t channel_1;

  typedef int32_t _channel_2_type;
  int32_t channel_2;

  typedef int32_t _channel_3_type;
  int32_t channel_3;

  typedef int32_t _channel_4_type;
  int32_t channel_4;

  typedef int32_t _channel_5_type;
  int32_t channel_5;

  typedef int32_t _channel_6_type;
  int32_t channel_6;

  typedef int32_t _channel_7_type;
  int32_t channel_7;


  typedef boost::shared_ptr< ::QuadroController::channel_values_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::QuadroController::channel_values_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct channel_values
typedef  ::QuadroController::channel_values_<std::allocator<void> > channel_values;

typedef boost::shared_ptr< ::QuadroController::channel_values> channel_valuesPtr;
typedef boost::shared_ptr< ::QuadroController::channel_values const> channel_valuesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::QuadroController::channel_values_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::QuadroController::channel_values_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace QuadroController

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::QuadroController::channel_values_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::QuadroController::channel_values_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::QuadroController::channel_values_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca7acf8e5a00666a779bed08a3dab8d4";
  }

  static const char* value(const  ::QuadroController::channel_values_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca7acf8e5a00666aULL;
  static const uint64_t static_value2 = 0x779bed08a3dab8d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::QuadroController::channel_values_<ContainerAllocator> > {
  static const char* value() 
  {
    return "QuadroController/channel_values";
  }

  static const char* value(const  ::QuadroController::channel_values_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::QuadroController::channel_values_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 channel_1\n\
int32 channel_2\n\
int32 channel_3\n\
int32 channel_4\n\
int32 channel_5\n\
int32 channel_6\n\
int32 channel_7\n\
\n\
";
  }

  static const char* value(const  ::QuadroController::channel_values_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::QuadroController::channel_values_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::QuadroController::channel_values_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.channel_1);
    stream.next(m.channel_2);
    stream.next(m.channel_3);
    stream.next(m.channel_4);
    stream.next(m.channel_5);
    stream.next(m.channel_6);
    stream.next(m.channel_7);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct channel_values_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::QuadroController::channel_values_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::QuadroController::channel_values_<ContainerAllocator> & v) 
  {
    s << indent << "channel_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_1);
    s << indent << "channel_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_2);
    s << indent << "channel_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_3);
    s << indent << "channel_4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_4);
    s << indent << "channel_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_5);
    s << indent << "channel_6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_6);
    s << indent << "channel_7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel_7);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUADROCONTROLLER_MESSAGE_CHANNEL_VALUES_H

